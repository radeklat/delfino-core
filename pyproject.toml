[tool.poetry]
name="delfino-core"
version="9.0.0"
authors = ["Radek LÃ¡t <radek.lat@gmail.com>"]
description="Delfino core plugin"
license = "MIT License"
readme = "README.md"
homepage = "https://github.com/radeklat/delfino-core"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.9.1"
delfino = ">=3.1.2"

pre-commit = {version = "*", optional = true}
pytest = {version = "*", optional = true}
coverage = {version = "*", optional = true}
pytest-cov = {version = "*", optional = true}
mypy = {version = "*", optional = true}
gitpython = {version = "*", optional = true}
shellingham = {version = "*", optional = true}
PyYAML = {version = "*", optional = true}
ruff = {version = ">=0.5.0", optional = true}
httpx = {version = "*", optional = true}

# https://python-poetry.org/docs/pyproject/#plugins
[tool.poetry.plugins]

[tool.poetry.plugins."delfino.plugin"]
"delfino-core" = "delfino_core.commands"

[tool.poetry.group.dev.dependencies]
coverage = "^7.0"
mypy = "^1.4"
pytest = "^8.2"
pytest-cov = "^6.0"
pytest-mock = "^3.6"
pre-commit = "^4.2"
shellingham = "^1.4"
gitpython = "^3.1"
ruff = "^0.11.0"
httpx = "^0.28.1"
types-termcolor = "*"
types-toml = "*"
types-pyyaml = "*"

[tool.poetry.extras]
all = ["pre-commit", "pytest", "coverage", "pytest-cov", "mypy", "gitpython", "PyYAML", "ruff", "httpx"]
verify = ["pre-commit", "pytest", "coverage", "pytest-cov", "mypy", "ruff"]
test = ["pytest", "coverage", "pytest-cov"]
mypy = ["mypy"]
ruff = ["ruff"]
dependencies_update = ["gitpython"]
vcs = ["httpx"]
pre_commit = ["PyYAML"]

[tool.pytest.ini_options]
testpaths = "tests/unit tests/integration"
python_functions = "should_*"
junit_family = "xunit2"

# Structure: https://docs.pytest.org/en/stable/warnings.html
# Values:    https://docs.python.org/3/library/warnings.html#describing-warning-filters
#            action:message:category:module:line
filterwarnings = [

]

markers = [
]

[tool.mypy]
show_column_numbers = true
show_error_codes = true
color_output = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
follow_imports = "silent"

[[tool.mypy.overrides]]
# Source code dependencies
module = [
    "delfino.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle, errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # PEP8-naming
    "PL",  # Pylint
    "UP",  # pyupgrade
    "W",   # pycodestyle, warning
]
ignore = [
    # See https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D1",  # Missing docstrings. We rely on code reviews. Names are often descriptive enough and don't need additional docstring.
    "D401",  # "First line should be in imperative mood"
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D102",  # missing-documentation-for-public-method
]

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.delfino.plugins.local.vcs]
#branch_prefix = ""

[tool.delfino.plugins.local.issue_tracking]
issue_prefix = "PCAT-"
tracker_url = "https://heurekagroup.atlassian.net"